(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{70:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return r})),a.d(t,"metadata",(function(){return s})),a.d(t,"rightToc",(function(){return c})),a.d(t,"default",(function(){return l}));var n=a(2),o=a(6),i=(a(0),a(79)),r={title:"Configuration"},s={unversionedId:"configuration",id:"configuration",isDocsHomePage:!1,title:"Configuration",description:"The .upptimerc.yml file is used as the central configuration for Upptime, with this syntax:",source:"@site/docs/configuration.md",slug:"/configuration",permalink:"/docs/configuration",editUrl:"https://github.com/upptime/upptime.js.org/blob/master/docs/configuration.md",version:"current",sidebar:"sidebar",previous:{title:"Getting started",permalink:"/docs/get-started"},next:{title:"Triggers",permalink:"/docs/triggers"}},c=[{value:"Configuration options",id:"configuration-options",children:[{value:"Repository",id:"repository",children:[]},{value:"Endpoints",id:"endpoints",children:[]},{value:"User agent",id:"user-agent",children:[]},{value:"Notifications",id:"notifications",children:[]},{value:"Assignees",id:"assignees",children:[]},{value:"Branding",id:"branding",children:[]},{value:"Custom domain",id:"custom-domain",children:[]},{value:"Navbar links",id:"navbar-links",children:[]},{value:"Intro text",id:"intro-text",children:[]},{value:"Site deployment",id:"site-deployment",children:[]},{value:"Internationalization",id:"internationalization",children:[]},{value:"Repository metadata",id:"repository-metadata",children:[]},{value:"Git commit options",id:"git-commit-options",children:[]},{value:"Custom API base URL",id:"custom-api-base-url",children:[]}]}],p={rightToc:c};function l(e){var t=e.components,a=Object(o.a)(e,["components"]);return Object(i.b)("wrapper",Object(n.a)({},p,a,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},".upptimerc.yml")," file is used as the central configuration for Upptime, with this syntax:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yaml"}),"owner: koj-co # GitHub username\nrepo: upptime # GitHub repository name\nuser-agent: koj-co\nsites: # List of endpoints to track\n  - name: Google\n    url: https://www.google.com\nassignees: # Users to assign downtime issues (optional)\n  - AnandChowdhary\nstatus-website: # Status website (optional)\n  cname: upptime.js.org # Custom domain CNAME\n  # baseUrl: /repo\n  name: Upptime # Status website title\n")),Object(i.b)("h2",{id:"configuration-options"},"Configuration options"),Object(i.b)("h3",{id:"repository"},"Repository"),Object(i.b)("p",null,'A GitHub repository is used as the "source of truth" for your uptime logs, and the static site uses the GitHub API and fetches data from this repository.'),Object(i.b)("p",null,"After you've created a new repository using this template (see ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://docs.github.com/en/github/creating-cloning-and-archiving-repositories/creating-a-repository-from-a-template"}),"Creating a repository from a template"),"), specify the username and repository name in the configuration:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yaml"}),"owner: koj-co\nrepo: upptime\n")),Object(i.b)("h3",{id:"endpoints"},"Endpoints"),Object(i.b)("p",null,"You can track as many websites as you like. Add the names and URLs of your endpoints in the sites key:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yaml"}),"sites:\n  - name: Google\n    url: https://www.google.com\n  - name: DuckDuckGo\n    url: https://duckduckgo.com\n")),Object(i.b)("p",null,"To make POST requests (or any other HTTP verb), you can add the method key:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yaml"}),"sites:\n  - name: POST to Google\n    url: https://www.google.com\n    method: POST\n  - name: DELETE Example\n    url: https://example.com\n    method: DELETE\n")),Object(i.b)("p",null,"If you don't want to show a URL publicly, you can use repository secrets (see ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://docs.github.com/en/free-pro-team@latest/actions/reference/encrypted-secrets"}),"Creating and storing encrypted secrets"),"). Instead of the plain text URL, add the name of the secret prefixed with a $ character:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yaml"}),"- name: Secret Site\n  url: $SECRET_SITE\n")),Object(i.b)("p",null,"In the above example, a secret named SECRET_SITE (without the $) is stored in the repository. You can add up to 10 additional secret sites, like ",Object(i.b)("inlineCode",{parentName:"p"},"$SECRET_SITE_1"),", ",Object(i.b)("inlineCode",{parentName:"p"},"$SECRET_SITE_2"),", ",Object(i.b)("inlineCode",{parentName:"p"},"$SECRET_SITE_3"),", etc."),Object(i.b)("p",null,"You can also use these secrets as part of the URL, for example:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yaml"}),"- name: API endpoint\n  url: https://example.com/get-user/3?api_key=$SECRET_SITE_2\n")),Object(i.b)("p",null,"Similarly, you can set headers in a request like so:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yaml"}),'- name: API endpoint\n  url: https://example.com/get-user/3\n  headers:\n    - "Authorization: Bearer $SECRET_SITE_2"\n    - "Content-Type: application/json"\n')),Object(i.b)("p",null,"If you, for example, expect a ",Object(i.b)("inlineCode",{parentName:"p"},"404")," response (which is traditionally an error response), you can set it as ",Object(i.b)("inlineCode",{parentName:"p"},"expectedStatusCodes")," to mark your site as up. By default, all 20x and 30x responses are as ",Object(i.b)("inlineCode",{parentName:"p"},"expectedStatusCodes"),":"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yaml"}),"sites:\n  - name: Google\n    url: https://www.google.com\n    expectedStatusCodes:\n      - 200\n      - 201\n      - 404\n")),Object(i.b)("p",null,"If you're using a self-signed SSL certificate, you can set the ",Object(i.b)("inlineCode",{parentName:"p"},"__dangerous__insecure")," option to ",Object(i.b)("inlineCode",{parentName:"p"},"true")," to skip verifying the certificate:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yaml"}),"- name: API endpoint\n  url: https://example.com/get-user/3\n  __dangerous__insecure: true\n")),Object(i.b)("h3",{id:"user-agent"},"User agent"),Object(i.b)("p",null,"Requests made to the GitHub API must include a valid User-Agent header (see User Agent required). It is recommended to use your GitHub username here:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yaml"}),"user-agent: your-github-username\n")),Object(i.b)("h3",{id:"notifications"},"Notifications"),Object(i.b)("p",null,"You can add services to send downtime notifications to. Currently, only Slack and Discord notifications are supported. For more information about notifications, visit the ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/notifications"}),"Notifications docs")," page:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yaml"}),"notifications:\n  - type: slack\n    channel: C01XQ3U9M9P\n")),Object(i.b)("h3",{id:"assignees"},"Assignees"),Object(i.b)("p",null,"You can add members of your team to be assigned to every downtime issue:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yaml"}),"assignees:\n  - AnandChowdhary\n  - CarloBadini\n")),Object(i.b)("p",null,"If you want particular users to be assigned per-site, you can add assignees under each entry in sites:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yaml"}),"sites:\n  - name: Google\n    url: https://www.google.com\n    assignees:\n      - AnandChowdhary\n")),Object(i.b)("h3",{id:"branding"},"Branding"),Object(i.b)("p",null,"A static website with PWA is also generated, and you can customize the logo and name in the navbar:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yaml"}),"status-website:\n  name: Upptime\n  logoUrl: https://example.com/image.jpg\n")),Object(i.b)("h3",{id:"custom-domain"},"Custom domain"),Object(i.b)("p",null,"If you want to add a custom domain, you can add the cname key:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yaml"}),"status-website:\n  name: Upptime\n  logoUrl: https://example.com/image.jpg\n  cname: upptime.js.org # Custom CNAME\n")),Object(i.b)("p",null,"If you're not using a custom domain, you should add the base URL to support the default GitHub Pages URL."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yaml"}),'status-website:\n  baseUrl: /repo # where "repo" is your repository name\n  name: Your Status Website\n')),Object(i.b)("p",null,"Then, your status page may be hosted on ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://user.github.io/repo/"}),"https://user.github.io/repo/"),", where ",Object(i.b)("inlineCode",{parentName:"p"},"user")," is your GitHub username and ",Object(i.b)("inlineCode",{parentName:"p"},"repo")," is your repository name."),Object(i.b)("h3",{id:"navbar-links"},"Navbar links"),Object(i.b)("p",null,"You can customize the navbar by adding or removing top-level navigation links."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yaml"}),"status-website:\n  navbar:\n    - title: Status\n      href: /\n    - title: GitHub\n      href: https://github.com/$OWNER/$REPO\n")),Object(i.b)("h3",{id:"intro-text"},"Intro text"),Object(i.b)("p",null,"Optionally, you can add some introductory text to the website. You can use Markdown:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yaml"}),'status-website:\n  introTitle: "**Upptime** is the open-source uptime monitor and status page, powered entirely by GitHub."\n  introMessage: This is a sample status page which uses **real-time** data from our [Github repository](https://github.com/koj-co/upptime). No server required \u2014 just GitHub Actions, Issues, and Pages.\n')),Object(i.b)("h3",{id:"site-deployment"},"Site deployment"),Object(i.b)("p",null,"Because GitHub Pages does not support the default ",Object(i.b)("inlineCode",{parentName:"p"},"GITHUB_TOKEN")," available to workflows, you'll have to set a secret GH_PAT with a Personal Access Token. For more info, see: ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/maxheld83/ghpages#secrets"}),"https://github.com/maxheld83/ghpages#secrets"),"."),Object(i.b)("h3",{id:"internationalization"},"Internationalization"),Object(i.b)("p",null,"Though our status page is in English, you can use any language with Upptime by supplying the required strings. The list of all required strings is available in site/i18n.yml, and you can add them under the i18n key in the configuration file:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yaml"}),"i18n:\n  activeIncidents: Incidentes activos\n  allSystemsOperational: Todos los sistemas est\xe1n operativos\n  # ...\n")),Object(i.b)("h3",{id:"repository-metadata"},"Repository metadata"),Object(i.b)("p",null,"If you've just set up your new repository and don't have repository metadata (like description, topics, and homepage), Upptime will update that for you. It will update the metadata as follows:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"Description:"),' "\ud83d\udcc8 Uptime monitor and status page for $TITLE, powered by @upptime", where $TITLE is the name of your GitHub organization or user'),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"Topics:"),' "uptime-monitor", "status-page", "upptime"'),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"Homepage:")," Link to your status website")),Object(i.b)("p",null,"You can add these configuration properties if you don't want these updates to occur:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yaml"}),"skipDescriptionUpdate: true\nskipTopicsUpdate: true\nskipHomepageUpdate: true\n")),Object(i.b)("h3",{id:"git-commit-options"},"Git commit options"),Object(i.b)("p",null,"Upptime commits to git history to keep a track of response times, and also commits graphs and README updates. You can change the commit messages for each of these actions:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yaml"}),'commitMessages:\n  readmeContent: ":pencil: Update summary in README [skip ci] [upptime]"\n  summaryJson: ":card_file_box: Update status summary [skip ci] [upptime]"\n  statusChange: "$EMOJI $SITE_NAME is $STATUS ($RESPONSE_CODE in $RESPONSE_TIME ms) [skip ci] [upptime]"\n  graphsUpdate: ":bento: Update graphs [skip ci] [upptime]"\n')),Object(i.b)("p",null,"By default, these commits are done by ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/upptime-bot"}),"Upptime Bot"),", but you can overwrite these commits to use your bot instead."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yaml"}),'commitMessages:\n  commitAuthorName: "Upptime Bot"\n  commitAuthorEmail: "upptime@koj.co"\n')),Object(i.b)("h3",{id:"custom-api-base-url"},"Custom API base URL"),Object(i.b)("p",null,"By default, Upptime uses the official GitHub API to fetch data for your status page website. If you have a proxy API (perhaps using a personal access token with readonly access to your private repository), you can set the ",Object(i.b)("inlineCode",{parentName:"p"},"apiBaseUrl")," key under ",Object(i.b)("inlineCode",{parentName:"p"},"status-website"),":"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yaml"}),"status-website:\n  apiBaseUrl: https://api.github.com\n")))}l.isMDXComponent=!0},79:function(e,t,a){"use strict";a.d(t,"a",(function(){return u})),a.d(t,"b",(function(){return d}));var n=a(0),o=a.n(n);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function c(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var p=o.a.createContext({}),l=function(e){var t=o.a.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},u=function(e){var t=l(e.components);return o.a.createElement(p.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},m=o.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,r=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=l(a),m=n,d=u["".concat(r,".").concat(m)]||u[m]||b[m]||i;return a?o.a.createElement(d,s(s({ref:t},p),{},{components:a})):o.a.createElement(d,s({ref:t},p))}));function d(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,r=new Array(i);r[0]=m;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:n,r[1]=s;for(var p=2;p<i;p++)r[p]=a[p];return o.a.createElement.apply(null,r)}return o.a.createElement.apply(null,a)}m.displayName="MDXCreateElement"}}]);